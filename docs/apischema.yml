openapi: 3.0.3
info:
  title: PolarRoute-Server
  version: 0.2.0
  description: Backend server for serving PolarRoute and MeshiPhi assets
paths:
  /api/evaluate_route:
    post:
      operationId: api_route_evaluation
      description: Provides full logging of requests and responses
      tags:
      - evaluate_route
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteEvaluationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RouteEvaluationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RouteEvaluationRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteEvaluationSuccess'
          description: Route evaluated successfully.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoMesh'
          description: No matching mesh found.
  /api/job/{id}:
    get:
      operationId: api_job_retrieve_status
      description: Return status of job and route URL if complete.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - job
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatusSuccess'
          description: Job status retrieved successfully.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobNotFound'
          description: Job with the specified ID not found.
    delete:
      operationId: api_job_cancel
      description: Cancel job
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - job
      security:
      - {}
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCancelAccepted'
          description: Job cancellation accepted.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCancelNotFound'
          description: Job with the specified ID not found.
  /api/mesh/{id}:
    get:
      operationId: api_mesh_get
      description: Provides full logging of requests and responses
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - mesh
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeshDetailSuccess'
          description: Mesh details retrieved successfully.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoMesh'
          description: No matching mesh found.
  /api/recent_routes:
    get:
      operationId: api_recent_routes_list
      description: Get recent routes
      tags:
      - recent_routes
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentRoutesSuccess'
          description: List of recent routes retrieved successfully.
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoRecentRoutesFound'
          description: No recent routes found for today.
  /api/route:
    post:
      operationId: api_route_create_request
      description: Entry point for route requests
      tags:
      - route
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteCreationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RouteCreationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RouteCreationRequest'
        required: true
      security:
      - {}
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteRequestAccepted'
          description: Route calculation job submitted successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteCreationBadRequest'
          description: Invalid request data.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoMesh'
          description: No matching mesh found.
  /api/route/{id}:
    get:
      operationId: api_route_retrieve_by_id
      description: Return route data by route ID.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - route
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: Route data retrieved successfully.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteNotFound'
          description: Route with the specified ID not found.
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/vehicle:
    get:
      operationId: api_vehicle_list_retrieve
      description: Retrieve all vehicles
      tags:
      - vehicle
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
          description: List of all vehicles.
        '204':
          description: No vehicles found.
    post:
      operationId: api_vehicle_create_request
      description: Entry point to create vehicles
      tags:
      - vehicle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleCreationSuccess'
          description: Vehicle created or updated successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleValidationError'
          description: Invalid input data for vehicle configuration.
        '406':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleExistsError'
          description: Pre-existing vehicle found, 'force_properties' not specified
            or not true.
  /api/vehicle/{vessel_type}/:
    get:
      operationId: api_vehicle_retrieve_by_type
      description: Retrieve vehicle by vessel_type
      parameters:
      - in: path
        name: vessel_type
        schema:
          type: string
        required: true
      tags:
      - vehicle
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
          description: Vehicle details retrieved successfully.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleNotFound'
          description: Vehicle with the specified vessel_type not found.
    delete:
      operationId: api_vehicle_delete_by_type
      description: Delete vehicle by vessel_type
      parameters:
      - in: path
        name: vessel_type
        schema:
          type: string
        required: true
      tags:
      - vehicle
      security:
      - {}
      responses:
        '204':
          description: Vehicle deleted successfully.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDeleteNotFound'
          description: Vehicle with the specified vessel_type not found.
  /api/vehicle/available:
    get:
      operationId: api_vehicle_available_list
      description: Endpoint to list all distinct vessel_types available.
      tags:
      - vehicle
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VesselTypeListSuccess'
          description: List of available vessel types retrieved successfully.
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoVesselTypesFound'
          description: No available vessel types found.
components:
  schemas:
    JobCancelAccepted:
      type: object
      properties:
        message:
          type: string
          description: Confirmation message that job cancellation was accepted.
      required:
      - message
    JobCancelNotFound:
      type: object
      properties:
        error:
          type: string
          description: Error message indicating job not found.
      required:
      - error
    JobNotFound:
      type: object
      properties:
        error:
          type: string
          description: Error message indicating job not found.
      required:
      - error
    JobStatusSuccess:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the job.
        status:
          type: string
          description: Current status of the job (PENDING, SUCCESS, FAILURE, etc.).
        polarrouteserver-version:
          type: string
          description: Version of PolarRoute-server.
        route_id:
          type: string
          format: uuid
          description: ID of the associated route.
        created:
          type: string
          format: date-time
          description: When the job was created.
        info:
          type: object
          additionalProperties: {}
          description: Additional information or error details if status is FAILURE.
        route_url:
          type: string
          format: uri
          description: URL to retrieve the route data when status is SUCCESS.
      required:
      - created
      - id
      - polarrouteserver-version
      - route_id
      - status
    MeshDetailSuccess:
      type: object
      properties:
        polarrouteserver-version:
          type: string
          description: Version of PolarRoute-server.
        id:
          type: string
          format: uuid
          description: ID of the mesh.
        json:
          description: Mesh JSON.
        geojson:
          description: Mesh GeoJSON.
      required:
      - geojson
      - id
      - json
      - polarrouteserver-version
    NoMesh:
      type: object
      properties:
        info:
          type: object
          additionalProperties: {}
          description: Error message indicating no mesh found.
        status:
          type: string
          description: Status of the request (e.g., FAILURE).
      required:
      - info
      - status
    NoRecentRoutesFound:
      type: object
      properties:
        message:
          type: string
          description: Message indicating no recent routes were found.
      required:
      - message
    NoVesselTypesFound:
      type: object
      properties:
        vessel_types:
          type: array
          items:
            type: string
          description: Empty list of vessel types.
        message:
          type: string
          description: Message indicating no vessel types were found.
      required:
      - message
      - vessel_types
    RecentRoutesSuccess:
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
          description: List of recent routes.
        polarrouteserver-version:
          type: string
      required:
      - polarrouteserver-version
      - routes
    Route:
      type: object
      properties:
        start_lat:
          type: number
          format: double
        start_lon:
          type: number
          format: double
        end_lat:
          type: number
          format: double
        end_lon:
          type: number
          format: double
        start_name:
          type: string
          nullable: true
          maxLength: 100
        end_name:
          type: string
          nullable: true
          maxLength: 100
        json:
          nullable: true
        json_unsmoothed:
          nullable: true
        polar_route_version:
          type: string
          nullable: true
          maxLength: 60
        info:
          nullable: true
        mesh:
          type: integer
          nullable: true
      required:
      - end_lat
      - end_lon
      - start_lat
      - start_lon
    RouteCreationBadRequest:
      type: object
      properties:
        info:
          type: object
          additionalProperties: {}
          description: Details about the error, e.g., missing parameters.
        status:
          type: string
          description: Status of the request (e.g., FAILURE).
      required:
      - info
      - status
    RouteCreationRequest:
      type: object
      properties:
        start_lat:
          type: number
          format: double
          description: Starting latitude of the route.
        start_lon:
          type: number
          format: double
          description: Starting longitude of the route.
        end_lat:
          type: number
          format: double
          description: Ending latitude of the route.
        end_lon:
          type: number
          format: double
          description: Ending longitude of the route.
        start_name:
          type: string
          nullable: true
          description: Name of the start point.
        end_name:
          type: string
          nullable: true
          description: Name of the end point.
        mesh_id:
          type: string
          format: uuid
          nullable: true
          description: 'Optional: Custom mesh ID to use for route calculation.'
        force_new_route:
          type: boolean
          default: false
          description: If true, forces recalculation even if an existing route is
            found.
      required:
      - end_lat
      - end_lon
      - start_lat
      - start_lon
    RouteEvaluationRequest:
      type: object
      properties:
        route:
          description: The route JSON to evaluate.
        custom_mesh_id:
          type: string
          format: uuid
          nullable: true
          description: 'Optional: Custom mesh ID to use for evaluation.'
      required:
      - route
    RouteEvaluationSuccess:
      type: object
      properties:
        polarrouteserver-version:
          type: string
          description: Version of PolarRoute-server.
        evaluation_results:
          type: object
          additionalProperties: {}
          description: Results of the route evaluation.
      required:
      - evaluation_results
      - polarrouteserver-version
    RouteNotFound:
      type: object
      properties:
        error:
          type: string
          description: Error message indicating route not found.
      required:
      - error
    RouteRequestAccepted:
      type: object
      properties:
        job_id:
          type: string
          format: uuid
          description: ID of the submitted job for route calculation.
        status-url:
          type: string
          format: uri
          description: URL to check the status of the route calculation job.
        polarrouteserver-version:
          type: string
          description: Version of PolarRoute-server.
        info:
          type: object
          additionalProperties: {}
          description: Information or warning messages about the route calculation.
      required:
      - job_id
      - polarrouteserver-version
      - status-url
    Vehicle:
      type: object
      properties:
        vessel_type:
          type: string
          maxLength: 150
        max_speed:
          type: number
          format: double
        unit:
          type: string
          maxLength: 150
        max_ice_conc:
          type: number
          format: double
          nullable: true
        min_depth:
          type: number
          format: double
          nullable: true
        max_wave:
          type: number
          format: double
          nullable: true
        excluded_zones:
          nullable: true
        neighbour_splitting:
          type: boolean
          nullable: true
        beam:
          type: number
          format: double
          nullable: true
        hull_type:
          type: string
          nullable: true
          maxLength: 150
        force_limit:
          type: number
          format: double
          nullable: true
      required:
      - max_speed
      - unit
    VehicleCreationSuccess:
      type: object
      properties:
        vessel_type:
          type: string
          description: The type of vessel successfully created or updated.
      required:
      - vessel_type
    VehicleDeleteNotFound:
      type: object
      properties:
        error:
          type: string
          description: Error message indicating vehicle not found.
      required:
      - error
    VehicleExistsError:
      type: object
      properties:
        info:
          type: object
          additionalProperties: {}
          description: Details about the conflict, indicating a pre-existing vehicle.
      required:
      - info
    VehicleNotFound:
      type: object
      properties:
        error:
          type: string
          description: Error message indicating vehicle not found.
      required:
      - error
    VehicleValidationError:
      type: object
      properties:
        info:
          type: object
          additionalProperties: {}
          description: Details about the validation error, including the error message.
      required:
      - info
    VesselTypeListSuccess:
      type: object
      properties:
        vessel_types:
          type: array
          items:
            type: string
          description: List of available vessel types.
      required:
      - vessel_types
